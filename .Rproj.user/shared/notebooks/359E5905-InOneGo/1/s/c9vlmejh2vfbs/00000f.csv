"0",""
"0","# Create a color function based on standardized scale"
"0","color_func <- circlize::colorRamp2("
"0","  c(-2, 0, 2),"
"0","  c(""#67a9cf"", ""#f7f7f7"", ""#ef8a62"")"
"0",")"
"0",""
"0",""
"0","make_module_heatmap <- function(module_name, expression_mat, metadata_df,"
"0","                                module_gene, module_eigengenes_df) {"
"0",""
"0","  "
"0","  # Extract a vector of variables IDs that correspond to this module and group"
"0","  df_comb <- metadata_df[, c('group', module_gene)]"
"0","  "
"0","  # Combine the eigengene data and the original data"
"0","  df_comb <- cbind(df_comb, module_eigengenes_df[paste0('ME',module_name)])"
"0","  "
"0","  # Sort by group"
"0","  df_comb <- dplyr::arrange(df_comb, group)"
"0",""
"0","  "
"0","  # Create the ComplexHeatmap column annotation object"
"0","  col_annot <- HeatmapAnnotation("
"0","    group = df_comb$group,  # Supply treatment labels"
"0","    module_eigengene = anno_barplot(df_comb[[paste0('ME',module_name)]]),  # Add annotation barplot"
"0","    col = list(group = c(""case"" = ""#f1a340"", ""control"" = ""#998ec3""))  # Pick colors for each experimental group in time_point"
"0","  )"
"0","    "
"0","  # Normalize the original values and keep for heatmap visualization"
"0","  mod_mat <- t(scale(df_comb[, -c(1, ncol(df_comb))]))"
"0",""
"0",""
"0","  # Plot on a heatmap"
"0","  heatmap <- ComplexHeatmap::Heatmap(mod_mat,"
"0","    name = paste0('ME',module_name),"
"0","    # Supply color function"
"0","    col = color_func,"
"0","    # Supply column annotation"
"0","    bottom_annotation = col_annot,"
"0","    # We don't want to cluster samples"
"0","    cluster_columns = FALSE,"
"0","    # We don't need to show sample or gene labels"
"0","    show_row_names = TRUE,"
"0","    show_column_names = FALSE"
"0","  )"
"0",""
"0","  # Return heatmap"
"0","  return(heatmap)"
"0","}"

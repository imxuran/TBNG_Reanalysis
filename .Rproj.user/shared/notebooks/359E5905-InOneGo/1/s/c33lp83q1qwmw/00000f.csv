"0",""
"0","# Functions to construct the consensus similarity matrix"
"0","compute_SNF <- function(similarity_list) {"
"0","  K = 7		# number of neighbors"
"0","  alpha = 0.5  	# hyperparameter"
"0","  T = 10 	# Number of Iterations"
"0","  "
"0","  #truelabel = list() ##the ground truth of the simulated data;"
"0","  "
"0","  #similarity_list = lapply(similarity_list, standardNormalization)"
"0","  "
"0","  wlist <- list()  # Store similarity graphs"
"0","  "
"0","  for (d in similarity_list) {"
"0","    #d <- dist2(as.matrix(t(s)),as.matrix(t(s)))"
"0","    w <- affinityMatrix(d, K, alpha) # Computes the affinity matrix for a given distance matrix"
"0","    wlist <- append(wlist, list(w))"
"0","  }"
"0","  "
"0","  "
"0","  W <- SNF(wlist, K, T)  # Compute the overall network"
"0",""
"0","  C = 5		# number of clusters"
"0","  group <- spectralClustering(W, C) 	# the final subtypes information"
"0","  "
"0","  col = getColorsForGroups(group, colors = colorRampPalette(brewer.pal(9, ""Paired""))(9))"
"0","  "
"0","  displayClustersWithHeatmap(W, group, col = colorRampPalette(brewer.pal(9, ""Purples""))(50), ColSideColors=col)"
"0","  "
"0","  return(W)"
"0","}"
"0",""
